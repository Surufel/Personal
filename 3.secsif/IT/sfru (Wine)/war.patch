--- dlls/wined3d/device.c	2009-03-13 17:07:55.000000000 +0100
+++ dlls/wined3d/device.c	2009-03-17 13:10:12.000000000 +0100
@@ -3585,6 +3585,8 @@
     TRACE("(%p) : Sampler %#x, Type %s (%#x), Value %#x\n",
             This, Sampler, debug_d3dsamplerstate(Type), Type, Value);
 
+    if (Type == WINED3DSAMP_SRGBTEXTURE) return WINED3D_OK;
+
     if (Sampler >= WINED3DVERTEXTEXTURESAMPLER0 && Sampler <= WINED3DVERTEXTEXTURESAMPLER3) {
         Sampler -= (WINED3DVERTEXTEXTURESAMPLER0 - MAX_FRAGMENT_SAMPLERS);
     }

--- dlls/wined3d/directx.c	2009-03-13 17:07:55.000000000 +0100
+++ dlls/wined3d/directx.c	2009-03-17 13:10:12.000000000 +0100
@@ -3452,8 +3452,13 @@
     pCaps->MaxUserClipPlanes       = GL_LIMITS(clipplanes);
     pCaps->MaxActiveLights         = GL_LIMITS(lights);
 
-    pCaps->MaxVertexBlendMatrices      = GL_LIMITS(blends);
-    pCaps->MaxVertexBlendMatrixIndex   = 0;
+    if (GL_SUPPORT(ARB_VERTEX_BLEND)) {
+        pCaps->MaxVertexBlendMatrices    = GL_LIMITS(blends);
+        pCaps->MaxVertexBlendMatrixIndex = 0;
+    } else {
+        pCaps->MaxVertexBlendMatrices    = 4;
+        pCaps->MaxVertexBlendMatrixIndex = 255;
+    }
 
     pCaps->MaxAnisotropy   = GL_LIMITS(anisotropy);
     pCaps->MaxPointSize    = GL_LIMITS(pointsize);

--- dlls/wined3d/drawprim.c	2009-03-13 17:07:55.000000000 +0100
+++ dlls/wined3d/drawprim.c	2009-03-17 13:10:12.000000000 +0100
@@ -239,6 +239,73 @@
 }
 
 /*
+ * Emit a vertex using swoftware vertex blending
+ */
+static void emitBlendedVertex(IWineD3DStateBlockImpl *stateBlock, 
+                              const float *weights, int nweights, const BYTE *indices,
+                              const float *pos, const float *norm)
+{
+    const float *m;
+    float        vec[4];
+    float        mat[4*4];
+    float        last = 1.f;
+    int          i, j;
+                       
+    /* compute the weighted sum of the matrices */
+    m = &stateBlock->transforms[WINED3DTS_WORLDMATRIX((indices ? indices[0] : 0))].u.m[0][0];
+    for (j = 0; j < 16; j++)
+        mat[j] = m[j] * weights[0];
+    last -= weights[0];
+    
+    for (i = 1; i < nweights; i++) {
+        m = &stateBlock->transforms[WINED3DTS_WORLDMATRIX((indices ? indices[i] : i))].u.m[0][0];
+        for (j = 0; j < 16; j++)
+            mat[j] += m[j] * weights[i];
+        last -= weights[i];
+    }
+    
+    /* do the last */
+    if (last) {
+        m = &stateBlock->transforms[WINED3DTS_WORLDMATRIX((indices ? indices[i] : i))].u.m[0][0];
+        for (j = 0; j < 16; j++)
+            mat[j] += m[j] * last;
+    }
+
+    if (norm) {
+        /* compute the resulting normal */
+        vec[0] = norm[0] * mat[0] + norm[1] * mat[4] + norm[2] * mat[8];
+        vec[1] = norm[0] * mat[1] + norm[1] * mat[5] + norm[2] * mat[9];
+        vec[2] = norm[0] * mat[2] + norm[1] * mat[6] + norm[2] * mat[10];
+        /* normalize */
+        vec[3] = vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2];
+        if (vec[3]) {
+            vec[3] = 1.f / sqrtf(vec[3]);
+            vec[0] *= vec[3];
+            vec[1] *= vec[3];
+            vec[2] *= vec[3];
+        }
+    
+        glNormal3fv(vec);
+    }
+
+    if (pos) {
+        /* compute the resulting position */
+        vec[0] = pos[0] * mat[0] + pos[1] * mat[4] + pos[2] * mat[8] + mat[12];
+        vec[1] = pos[0] * mat[1] + pos[1] * mat[5] + pos[2] * mat[9] + mat[13];
+        vec[2] = pos[0] * mat[2] + pos[1] * mat[6] + pos[2] * mat[10] + mat[14];
+        vec[3] = pos[0] * mat[3] + pos[1] * mat[7] + pos[2] * mat[11] + mat[15];
+        /* normalize */
+        if (vec[3]) {
+            vec[0] /= vec[3];
+            vec[1] /= vec[3];
+            vec[2] /= vec[3];
+        }
+    
+        glVertex3fv(vec);
+    }
+}  
+
+/*
  * Actually draw using the supplied information.
  * Slower GL version which extracts info about each vertex in turn
  */
@@ -257,7 +324,8 @@
     BOOL specular_fog = FALSE;
     UINT texture_stages = GL_LIMITS(texture_stages);
     const BYTE *texCoords[WINED3DDP_MAXTEXCOORD];
-    const BYTE *diffuse = NULL, *specular = NULL, *normal = NULL, *position = NULL;
+    const BYTE *diffuse = NULL, *specular = NULL, *normal = NULL, *position = NULL, *weights = NULL, *indices = NULL;
+    int nweights = 0;
     DWORD tex_mask = 0;
 
     TRACE("Using slow vertex array code\n");
@@ -282,7 +350,7 @@
     /* Start drawing in GL */
     VTRACE(("glBegin(%x)\n", glPrimType));
     glBegin(glPrimType);
-
+        
     if (sd->u.s.position.lpData) position = sd->u.s.position.lpData + streamOffset[sd->u.s.position.streamNo];
 
     if (sd->u.s.normal.lpData) normal = sd->u.s.normal.lpData + streamOffset[sd->u.s.normal.streamNo];
@@ -325,6 +393,28 @@
     {
         GL_EXTCALL(glSecondaryColor3fEXT)(0, 0, 0);
     }
+    
+    if (This->vertexBlendSW) {
+        if (!sd->u.s.blendWeights.lpData) {
+            WARN("vertex blending enabled but blendWeights.lpData=NULL\n");
+        } else if (WINED3D_ATR_GLTYPE(sd->u.s.blendWeights.dwType) != GL_FLOAT) {
+            FIXME("unsupported blend weights datatype (%d)\n", sd->u.s.blendWeights.dwType);
+        } else if (position && sd->u.s.position.dwType != WINED3DDECLTYPE_FLOAT3) {
+            FIXME("unsupported postion datatype (%d)\n", sd->u.s.position.dwType);
+        } else if (normal && sd->u.s.normal.dwType != WINED3DDECLTYPE_FLOAT3) {
+            FIXME("unsupported normal datatype (%d)\n", sd->u.s.normal.dwType);
+        } else {
+            weights = sd->u.s.blendWeights.lpData + streamOffset[sd->u.s.blendWeights.streamNo];
+            nweights = WINED3D_ATR_FORMAT(sd->u.s.blendWeights.dwType);
+        }
+        
+        if (sd->u.s.blendMatrixIndices.lpData) {
+            if (sd->u.s.blendMatrixIndices.dwType != WINED3DDECLTYPE_UBYTE4)
+                FIXME("unsupported blend indices datatype (%d)\n", sd->u.s.blendMatrixIndices.dwType);
+            else
+                indices = sd->u.s.blendMatrixIndices.lpData + streamOffset[sd->u.s.blendMatrixIndices.streamNo];
+        }
+    }
 
     for (textureNo = 0; textureNo < texture_stages; ++textureNo)
     {
@@ -442,16 +532,24 @@
             }
         }
 
-        /* Normal -------------------------------- */
-        if (normal != NULL) {
-            const void *ptrToCoords = normal + SkipnStrides * sd->u.s.normal.dwStride;
-            normal_funcs[sd->u.s.normal.dwType](ptrToCoords);
-        }
+        if (weights) { 
+            emitBlendedVertex(This->stateBlock,
+                              (const float*)(weights + SkipnStrides * sd->u.s.blendWeights.dwStride), nweights,
+                              indices ? (indices + SkipnStrides * sd->u.s.blendMatrixIndices.dwStride) : NULL,
+                              (const float*)(position ? (position + SkipnStrides * sd->u.s.position.dwStride) : NULL),
+                              (const float*)(normal ? (normal + SkipnStrides * sd->u.s.normal.dwStride) : NULL));
+        } else {
+            /* Normal -------------------------------- */
+            if (normal) {
+                const void *ptrToCoords = normal + SkipnStrides * sd->u.s.normal.dwStride;
+                normal_funcs[sd->u.s.normal.dwType](ptrToCoords);
+            }
 
-        /* Position -------------------------------- */
-        if (position) {
-            const void *ptrToCoords = position + SkipnStrides * sd->u.s.position.dwStride;
-            position_funcs[sd->u.s.position.dwType](ptrToCoords);
+            /* Position -------------------------------- */
+            if (position) {
+                const void *ptrToCoords = position + SkipnStrides * sd->u.s.position.dwStride;
+                position_funcs[sd->u.s.position.dwType](ptrToCoords);
+            }
         }
 
         /* For non indexed mode, step onto next parts */

--- dlls/wined3d/state.c	2009-03-13 17:07:55.000000000 +0100
+++ dlls/wined3d/state.c	2009-03-17 13:10:12.000000000 +0100
@@ -3461,7 +3461,7 @@
     if(context->last_was_rhw) {
         glLoadIdentity();
         checkGLcall("glLoadIdentity()");
-    } else {
+    } else if (!stateblock->wineD3DDevice->vertexBlendSW) {
         /* In the general case, the view matrix is the identity matrix */
         if (stateblock->wineD3DDevice->view_ident) {
             glLoadMatrixf(&stateblock->transforms[WINED3DTS_WORLDMATRIX(0)].u.m[0][0]);
@@ -3472,6 +3472,9 @@
             glMultMatrixf(&stateblock->transforms[WINED3DTS_WORLDMATRIX(0)].u.m[0][0]);
             checkGLcall("glMultMatrixf");
         }
+    } else {
+        glLoadMatrixf(&stateblock->transforms[WINED3DTS_VIEW].u.m[0][0]);
+        checkGLcall("glLoadMatrixf");
     }
 }
 
@@ -3501,6 +3504,7 @@
 static void transform_worldex(DWORD state, IWineD3DStateBlockImpl *stateblock, WineD3DContext *context) {
     UINT matrix = state - STATE_TRANSFORM(WINED3DTS_WORLDMATRIX(0));
     GLenum glMat;
+    
     TRACE("Setting world matrix %d\n", matrix);
 
     if(matrix >= GL_LIMITS(blends)) {
@@ -3546,13 +3550,23 @@
         case WINED3DVBF_3WEIGHTS:
             if(!once) {
                 once = TRUE;
-                /* TODO: Implement vertex blending in drawStridedSlow */
                 FIXME("Vertex blending enabled, but not supported by hardware\n");
             }
+            if (!stateblock->wineD3DDevice->vertexBlendSW) {
+                stateblock->wineD3DDevice->vertexBlendSW = TRUE;
+                transform_world(state, stateblock, context);
+            }
             break;
 
         case WINED3DVBF_TWEENING:
             WARN("Tweening not supported yet\n");
+            /* fall through */
+        default:
+            if (stateblock->wineD3DDevice->vertexBlendSW) {
+                stateblock->wineD3DDevice->vertexBlendSW = FALSE;
+                transform_world(state, stateblock, context);
+            }
+            break;
     }
 }
 
@@ -4047,7 +4061,7 @@
                 WINED3D_ATR_GLTYPE(sd->u.s.blendWeights.dwType),
                 sd->u.s.blendWeights.dwStride,
                 sd->u.s.blendWeights.lpData + stateblock->loadBaseVertexIndex * sd->u.s.blendWeights.dwStride + offset[sd->u.s.blendWeights.streamNo]);
-
+            
             checkGLcall("glWeightPointerARB");
 
             if((sd->u.s.blendMatrixIndices.lpData) || (sd->u.s.blendMatrixIndices.VBO)){
@@ -4280,7 +4294,10 @@
 
     if (dataLocations->position_transformed) useVertexShaderFunction = FALSE;
 
-    if(useVertexShaderFunction) {
+    if (device->vertexBlendSW) {
+        TRACE("Using drawStridedSlow for vertex blending emulation\n");
+        device->useDrawStridedSlow = TRUE;
+    } else if (useVertexShaderFunction) {
         if(((IWineD3DVertexDeclarationImpl *) stateblock->vertexDecl)->half_float_conv_needed && !fixup) {
             TRACE("Using drawStridedSlow with vertex shaders for FLOAT16 conversion\n");
             device->useDrawStridedSlow = TRUE;

--- dlls/wined3d/texture.c	2009-03-13 17:07:55.000000000 +0100
+++ dlls/wined3d/texture.c	2009-03-17 13:11:48.000000000 +0100
@@ -128,7 +128,7 @@
                 /* TODO: This is not necessarily needed with hw palettized texture support */
                 IWineD3DSurface_LoadLocation(This->surfaces[i], SFLAG_INSYSMEM, NULL);
                 /* Make sure the texture is reloaded because of the palette change, this kills performance though :( */
-                IWineD3DSurface_ModifyLocation(This->surfaces[i], SFLAG_INTEXTURE, FALSE);
+//                IWineD3DSurface_ModifyLocation(This->surfaces[i], SFLAG_INTEXTURE, FALSE);
             }
         }
     }

--- dlls/wined3d/vertexdeclaration.c	2009-03-13 17:07:55.000000000 +0100
+++ dlls/wined3d/vertexdeclaration.c	2009-03-17 13:10:12.000000000 +0100
@@ -156,6 +156,15 @@
                 default:
                     return FALSE;
             }
+            
+        case WINED3DDECLUSAGE_BLENDINDICES:
+            switch(element->Type)
+            {
+                case WINED3DDECLTYPE_UBYTE4:
+                    return TRUE;
+                default:
+                    return FALSE;
+            }
 
         case WINED3DDECLUSAGE_NORMAL:
             switch(element->Type)

--- dlls/wined3d/wined3d_private.h	2009-03-13 17:07:55.000000000 +0100
+++ dlls/wined3d/wined3d_private.h	2009-03-17 13:10:12.000000000 +0100
@@ -1087,6 +1087,7 @@
     WORD view_ident : 1;                /* true iff view matrix is identity */
     WORD untransformed : 1;
     WORD vertexBlendUsed : 1;           /* To avoid needless setting of the blend matrices */
+    WORD vertexBlendSW : 1;             /* vertexBlend software fallback used */
     WORD isRecordingState : 1;
     WORD isInDraw : 1;
     WORD render_offscreen : 1;

